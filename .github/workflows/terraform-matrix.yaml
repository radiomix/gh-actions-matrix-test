##
##  Terraform workflow (c) 2021 by Elemica Inc.
##    - Create a JSON-matrix of folders with changed TF-files.
##    - Run the TF commands per JSON-matrix for each folder with changed TF-files.
##  Source: https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/
##  Maintainer: SRE-team Elemica Inc.
##

name: terraform-matrix

# Controls when the action will run
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  # Create a JSON-matrix of all folders with changed TF files.
  create-tf-matrix:
    runs-on: ubuntu-latest
    outputs:
      # Remember JSON-matrix for later usage.
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      # True/False ONLY_IFF TF file changed
      run_terraform: ${{ steps.set-matrix.outputs.check-matrix }}
    steps:
    - name: checkout code
      uses: actions/checkout@v2
      with:
          # Only partly explained: https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches
          # Nice explanation of 'git checkout HEAD^1': https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git
          # fetch-depth 0 = full history, 1 = only last commit (default), 2 = HEAD^ (last PARENT commit or merge in)
        fetch-depth: 0

    - name: Check changed files
      # Check for changed files: https://github.com/tj-actions/changed-files
      # Action outputs: 'all_changed_and_modified_files'
      id: check-for-changed-files
      uses: tj-actions/changed-files@v13
      with:
        files: |
          terraform/**/*tf

    - name: Set matrix
      id: set-matrix
      # Create a JSON-matrix of ALL FILES CHANDED as output for usage in other jobs/steps
      # Source: https://stackoverflow.com/questions/59977364/github-actions-how-use-strategy-matrix-with-script
      # - Collect list of chanded files and folders
      # - Construct JSON-matrix
      run: |
        FILE_LIST=$(echo ${{ steps.check-for-changed-files.outputs.all_modified_files }} | sort -u)
        DIR_LIST=$(dirname $FILE_LIST | sort -u)
        echo " *************"
        echo "$DIR_LIST"
        echo " *************"
        JSON="{\"include\":["
        for FOLDER in $(echo $DIR_LIST); do
          echo " *** Adding folder:$FOLDER:"
          JSON+="{\"folder\": \"$FOLDER\"},"
        done

        # Remove last "," and add closing brackets
        if [[ $JSON == *, ]]; then
          JSON="${JSON%?}"
        fi
        JSON="$JSON]}"
        echo " *************"
        echo $JSON  | jq
        echo " *************"
        # Set output
        echo "::set-output name=matrix::$( echo "$JSON" )"

    - name: Check matrix
      id: check-matrix
      # FIXME: sieve out other_changed_files IFF NOT only_changed
      if: (! ${{ steps.check-for-changed-files.outputs.only_changed }} )
      # set an output to decide wheather to trigger TF commands
      # for toJSON see: https://github.community/t/boolean-evaluation-workflow-yaml/173565
      run: |
        echo ::set-output name=run_terraform::${{ false }}
        for file in ${{ steps.check-for-changed-files.outputs.all_changed_files }}; do
          echo "File $file was changed"
          run_terraform=true
        done
        if [[  $run_terraform  ]]; then
          echo ::set-output name=run_terraform::${{ true }}
        fi

####################################
# run tf-matrix as reusable workflow
####################################
  Terraform:
    runs-on: ubuntu-latest
    needs: create-tf-matrix
    # for fromJSON see: https://github.community/t/boolean-evaluation-workflow-yaml/173565
    if: fromJSON(needs.create-tf-matrix.steps.check-matrix.outputs.run_terraform)
    ## FIXME: Before merging in: replace @mkl/GH-actions/TF-matrix with @master
    strategy:
      matrix: ${{fromJson(needs.create-tf-matrix.outputs.matrix)}}
    defaults:
       run:
        shell: bash

    steps:
    - name: show folder
      run: |
        echo $(pwd)
        echo "Do we need to run the matrix:fromJSON(needs.create-tf-matrix.steps.check-matrix.outputs.run_terraform):"
        echo "matrix.folder: Running in folder:${{ matrix.folder }}:"
        echo "PWD:  Running in folder:$(pwd):"

    # - name: run-matrix
    # syntax: organisation/repo/.gihub/workflows/reusable-action.yaml@version
    #   uses: elemica/elemicatms-operations/.github/workflows/terraform-base-reusable-workflow.yaml@mkl/GH-actions/TF-matrix
    #   with:
    #     terraform-folder: ${{fromJson(needs.create-tf-matrix.outputs.matrix)}}
    #     secrets:
    #       cli_config_credentials_token: ${{ secrets.ELEMICATMS_OPERATIONS_TERRAFORM_CI_TOKEN }}

##########################################
  # # Run TF commands per JSON-matrix.
  # run-matrix:
  #   needs: create-tf-matrix
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{fromJson(needs.create-tf-matrix.outputs.matrix)}}
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ${{ matrix.folder}}

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_version: 1.0.6

  #     - name: show folder
  #       run: |
  #         echo $(pwd)
  #         echo " Running TF command in folder:${{ matrix.folder}}:"

  #     - name: Terraform fmt ${{ matrix.folder}}
  #       id: fmt
  #       run: terraform fmt -check
  #     - name: Terraform init
  #       id: init
  #       run: terraform init
  #       continue-on-error: false

  #     - name: Terraform validate
  #       id: validate
  #       run: terraform validate

  #     - name: Terraform plan
  #       id: plan
  #       if: github.event_name == 'pull_request'
  #       run: terraform plan -no-color
  #       continue-on-error: true

  #     - name: Update Pull Request
  #       if: github.event_name == 'pull_request'
  #       uses: actions/github-script@v4.0.2

  #       env:
  #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  #           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

  #           <details><summary>Show Plan</summary>

  #           \`\`\`\n
  #           ${process.env.PLAN}
  #           \`\`\`

  #           </details>

  #           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

  #           github.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #       run: terraform apply -auto-approve
