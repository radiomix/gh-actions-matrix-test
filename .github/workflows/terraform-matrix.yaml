#
#
# Source: https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/
#   - Now you can include completely new combinations and even specify all of your matrix legs with include.
#   - The Actions expression language has a fromJSON(value) method that can take a stingified JSON object and bind it to a property.
#   - Combining this with run-tf-matrix.outputs you can build a workflow that has a fully dynamic matrix.
#

name: create-terraform-folder-matrix
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  create-terraform-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-tf-matrix.outputs.matrix }}
      run_terraform: ${{ steps.set-tf-matrix.outputs.run_terraform }}
    steps:
    - name: checkout code
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: test changed files
      id: check-terraform-folder-for-changed-files
      # Only run terraform IF tf files changed: https://github.com/tj-actions/changed-files
      # output: all_changed_and_modified_files (list of all files changed/modified)
      uses: tj-actions/changed-files@v13
      with:
        files: |
          terraform/**/*tf

    - name: set tf matrix
      id: set-tf-matrix
      # set JSON-matrix as output for usage in other jobs/steps
      # source: https://stackoverflow.com/questions/59977364/github-actions-how-use-strategy-matrix-with-script
      run: |
        run_terraform=NO
        FILE_LIST=$(echo ${{ steps.check-terraform-folder-for-changed-files.outputs.all_modified_files }} | sort -u)
        DIR_LIST=$(dirname $FILE_LIST | sort -u)
        echo " *************"
        echo "$DIR_LIST"
        echo " *************"
        JSON="{\"include\":["
        for FOLDER in $(echo $DIR_LIST); do
          echo " *** Adding folder:$FOLDER:"
          run_terraform=YES
          JSON+="{\"folder\": \"$FOLDER\"},"
        done

        # Remove last "," and add closing brackets
        if [[ $JSON == *, ]]; then
          JSON="${JSON%?}"
        fi
        JSON="$JSON]}"
        echo " *************"
        echo $JSON  | jq
        echo " *************"
        # Set output
        echo "::set-output name=matrix::$( echo "$JSON" )"

        # Check empty matrix
        if [[  "$run_terraform" == "YES"  ]]; then
          echo ::set-output name=run_terraform::${{ 'YES' }}
        else
          echo ::set-output name=run_terraform::${{ 'NO' }}
        fi

    - name: show folder
      run: |
        echo " Run Terraform:'${{ steps.set-tf-matrix.outputs.run_terraform}}'"
        echo " folder:'${{ steps.set-tf-matrix.outputs.matrix}}'"

############################
# run tf reusable workflow #
############################
  run-reusable-terraform:
    needs: create-terraform-matrix
    # # See: https://github.community/t/github-actions-show-pipeline-failed-with-red-cross-while-all-jobs-succeeded/189036/3
    # # if: ${{ needs.create-terraform-matrix.outputs.matrix != ''}}
    if: ${{ needs.create-terraform-matrix.outputs.run_terraform == 'YES'}}
    uses: radiomix/gh-actions-matrix-test/.github/workflows/terraform-base-reusable-workflow.yaml@tf-matrix
    with:
      terraform-folder: ${{ fromJSON(needs.create-terraform-matrix.outputs.folder)}}

    ## NEES TO GO INTO REUASABLE ???
    # strategy:
    #   fail-fast: true
    #   matrix: ${{ fromJSON(needs.create-terraform-matrix.outputs.matrix) }}

    # steps:
    #   - name: show tf folder
    #     run: |
    #       echo " Folder:${{ matrix.folder}}:"
    #       echo " Run Terraform:${{ needs.create-terraform-matrix.outputs.run_terraform }}:"

    #   - name: call reusable tf with folder
