#

name: terraform-matrix-reusable-workflow
on:
  # Workflow is reusable and will be called only.
  workflow_call:

jobs:
  create-terraform-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-folder-matrix.outputs.matrix }}
      run_terraform: ${{ steps.create-folder-matrix.outputs.run_terraform }}
    steps:
    - name: checkout code
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: test changed files
      id: check-terraform-folder-for-changed-files
      # Only run terraform IF tf files changed: https://github.com/tj-actions/changed-files
      # output: all_changed_and_modified_files (list of all files changed/modified)
      uses: tj-actions/changed-files@v13.2
      with:
        files: |
          terraform/**/*tf
        since_last_remote_commit: true

    - name: set tf matrix
      id: create-folder-matrix
      # set JSON-matrix as output for usage in other jobs/steps
      # source: https://stackoverflow.com/questions/59977364/github-actions-how-use-strategy-matrix-with-script
      run: |
        run_terraform=NO
        FILE_LIST=$(echo ${{ steps.check-terraform-folder-for-changed-files.outputs.all_modified_files }} | sort -u)
        DIR_LIST=$(dirname $FILE_LIST | sort -u)
        echo " *************"
        echo "$DIR_LIST"
        echo " *************"
        JSON="{\"include\":["
        for FOLDER in $(echo $DIR_LIST); do
          echo " *** Adding folder:$FOLDER:"
          run_terraform=YES
          JSON+="{\"folder\": \"$FOLDER\"},"
        done

        # Remove last "," and add closing brackets
        if [[ $JSON == *, ]]; then
          JSON="${JSON%?}"
        fi
        JSON="$JSON]}"
        echo " *************"
        echo $JSON  | jq
        echo " *************"
        # Set output
        echo "::set-output name=matrix::$( echo "$JSON" )"

        # Check empty matrix
        if [[  "$run_terraform" == "YES"  ]]; then
          echo ::set-output name=run_terraform::${{ 'YES' }}
        else
          echo ::set-output name=run_terraform::${{ 'NO' }}
        fi

    # - name: show folder
    #   run: |
    #     echo " Run Terraform:'${{ steps.create-folder-matrix.outputs.run_terraform}}'"
    #     echo " folder:'${{ steps.create-folder-matrix.outputs.matrix}}'"

  run-terraform-matrix:
    needs: create-terraform-matrix
    runs-on: ubuntu-latest
    # # See: https://github.community/t/github-actions-show-pipeline-failed-with-red-cross-while-all-jobs-succeeded/189036/3
    # # if: ${{ needs.create-terraform-matrix.outputs.matrix != ''}}
    if: ${{ needs.create-terraform-matrix.outputs.run_terraform == 'YES'}}
    strategy:
      # fail-fast: true
      matrix: ${{ fromJSON(needs.create-terraform-matrix.outputs.matrix) }}

    steps:
      - name: show terraform folder
        run: |
          echo " Folder:${{ matrix.folder}}:"
          echo " Run Terraform:${{ needs.create-terraform-matrix.outputs.run_terraform }}:"

     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          # Only partly explained: https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches
          # Nice explanation of 'git checkout HEAD^1': https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git
          # fetch-depth 0 = full history, 1 = only last commit (default), 2 = HEAD^ (last PARENT commit or merge in)
          fetch-depth: 2  # OR "2" -> To retrieve the preceding commit.

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.6
          # cli_config_credentials_token: ${{ secrets.cli_config_credentials_token }}

      # - name: Terraform fmt
      #   id: fmt
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: terraform fmt -check

      # - name: Terraform init
      #   id: init
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: terraform init
      #   continue-on-error: false

      # - name: Terraform validate
      #   id: validate
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: terraform validate

      # - name: Terraform plan
      #   id: plan
      #   if: github.event_name == 'pull_request' && steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: terraform plan -no-color
      #   continue-on-error: true

      # - name: Update Pull Request
      #   if: github.event_name == 'pull_request' && steps.changed-files-specific.outputs.any_changed == 'true'
      #   uses: actions/github-script@v4.0.2

      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
      #       #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
      #       #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure' && steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: exit 1

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/master' && github.event_name == 'push' && steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: terraform apply -auto-approve

